//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/InputSystem/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""GameControl"",
            ""id"": ""fff2e051-dfcd-49fb-8fdd-0e203008e261"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""34ba88a5-2068-4477-b49c-152f361dadf9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jumping"",
                    ""type"": ""Button"",
                    ""id"": ""1071f2fb-dd71-44fc-b4e8-7160dc68f514"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Spirinting"",
                    ""type"": ""Button"",
                    ""id"": ""24732517-7a1c-4ae2-bbd9-bfebb2f55d35"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interacting"",
                    ""type"": ""Button"",
                    ""id"": ""2b3a266b-10e4-444d-87a7-fd2bf92b858f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pausing"",
                    ""type"": ""Button"",
                    ""id"": ""f402284f-18ed-4d97-a4bc-6130c659aae8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""21898624-eccb-4764-9000-7c58dc6cabb0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f691ed2b-3e38-421e-ab79-7c7dd21a59a5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""37bae08d-0d97-48c1-8ec2-3948caf73e3f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dd9f1eb6-db00-4c1e-a436-1624018a1aca"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""20885238-6761-4838-9df9-81dbad99ed0c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3d6070f2-6145-42e9-862f-320a83ead663"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pausing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3c70567-149c-4655-9648-27957abfa54a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jumping"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""871a01ab-2669-409e-89b1-81921c26ebdf"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interacting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d0309a2-52dd-459b-b8c4-053063f8fc29"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spirinting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameControl
        m_GameControl = asset.FindActionMap("GameControl", throwIfNotFound: true);
        m_GameControl_Movement = m_GameControl.FindAction("Movement", throwIfNotFound: true);
        m_GameControl_Jumping = m_GameControl.FindAction("Jumping", throwIfNotFound: true);
        m_GameControl_Spirinting = m_GameControl.FindAction("Spirinting", throwIfNotFound: true);
        m_GameControl_Interacting = m_GameControl.FindAction("Interacting", throwIfNotFound: true);
        m_GameControl_Pausing = m_GameControl.FindAction("Pausing", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameControl
    private readonly InputActionMap m_GameControl;
    private List<IGameControlActions> m_GameControlActionsCallbackInterfaces = new List<IGameControlActions>();
    private readonly InputAction m_GameControl_Movement;
    private readonly InputAction m_GameControl_Jumping;
    private readonly InputAction m_GameControl_Spirinting;
    private readonly InputAction m_GameControl_Interacting;
    private readonly InputAction m_GameControl_Pausing;
    public struct GameControlActions
    {
        private @InputSystem m_Wrapper;
        public GameControlActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_GameControl_Movement;
        public InputAction @Jumping => m_Wrapper.m_GameControl_Jumping;
        public InputAction @Spirinting => m_Wrapper.m_GameControl_Spirinting;
        public InputAction @Interacting => m_Wrapper.m_GameControl_Interacting;
        public InputAction @Pausing => m_Wrapper.m_GameControl_Pausing;
        public InputActionMap Get() { return m_Wrapper.m_GameControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameControlActions set) { return set.Get(); }
        public void AddCallbacks(IGameControlActions instance)
        {
            if (instance == null || m_Wrapper.m_GameControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameControlActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jumping.started += instance.OnJumping;
            @Jumping.performed += instance.OnJumping;
            @Jumping.canceled += instance.OnJumping;
            @Spirinting.started += instance.OnSpirinting;
            @Spirinting.performed += instance.OnSpirinting;
            @Spirinting.canceled += instance.OnSpirinting;
            @Interacting.started += instance.OnInteracting;
            @Interacting.performed += instance.OnInteracting;
            @Interacting.canceled += instance.OnInteracting;
            @Pausing.started += instance.OnPausing;
            @Pausing.performed += instance.OnPausing;
            @Pausing.canceled += instance.OnPausing;
        }

        private void UnregisterCallbacks(IGameControlActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jumping.started -= instance.OnJumping;
            @Jumping.performed -= instance.OnJumping;
            @Jumping.canceled -= instance.OnJumping;
            @Spirinting.started -= instance.OnSpirinting;
            @Spirinting.performed -= instance.OnSpirinting;
            @Spirinting.canceled -= instance.OnSpirinting;
            @Interacting.started -= instance.OnInteracting;
            @Interacting.performed -= instance.OnInteracting;
            @Interacting.canceled -= instance.OnInteracting;
            @Pausing.started -= instance.OnPausing;
            @Pausing.performed -= instance.OnPausing;
            @Pausing.canceled -= instance.OnPausing;
        }

        public void RemoveCallbacks(IGameControlActions instance)
        {
            if (m_Wrapper.m_GameControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameControlActions instance)
        {
            foreach (var item in m_Wrapper.m_GameControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameControlActions @GameControl => new GameControlActions(this);
    public interface IGameControlActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJumping(InputAction.CallbackContext context);
        void OnSpirinting(InputAction.CallbackContext context);
        void OnInteracting(InputAction.CallbackContext context);
        void OnPausing(InputAction.CallbackContext context);
    }
}
